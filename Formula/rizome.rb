# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Rizome < Formula
  desc "Agentic development environment workflow management CLI"
  homepage "https://github.com/rizome-dev/rizome"
  version "0.1.1"
  license "GPL-2.0"

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/rizome-dev/rizome/releases/download/v0.1.1/rizome_Darwin_x86_64.tar.gz"
      sha256 "adb0e406310bb6ed6013cec75380c275a11351fae7663b03b0822f71ed8feafb"

      def install
        bin.install "rizome"

        # Generate and install shell completions
        generate_completions_from_executable(bin/"rizome", "completion")
      end
    end
    if Hardware::CPU.arm?
      url "https://github.com/rizome-dev/rizome/releases/download/v0.1.1/rizome_Darwin_arm64.tar.gz"
      sha256 "37973e9100efeb1760035d7b4ed5371024ae802307defc3f2fe40ac15ac0aff9"

      def install
        bin.install "rizome"

        # Generate and install shell completions
        generate_completions_from_executable(bin/"rizome", "completion")
      end
    end
  end

  on_linux do
    if Hardware::CPU.intel? and Hardware::CPU.is_64_bit?
      url "https://github.com/rizome-dev/rizome/releases/download/v0.1.1/rizome_Linux_x86_64.tar.gz"
      sha256 "571d3c76a739cc76d7166b28e1ec82c1979dc36d3f822fa973fa5a64dbcd7035"
      def install
        bin.install "rizome"

        # Generate and install shell completions
        generate_completions_from_executable(bin/"rizome", "completion")
      end
    end
    if Hardware::CPU.arm? and Hardware::CPU.is_64_bit?
      url "https://github.com/rizome-dev/rizome/releases/download/v0.1.1/rizome_Linux_arm64.tar.gz"
      sha256 "ea7b9e3b4c56caf59fb5ed3b230871a39b990230592057f48524e63688bb43c3"
      def install
        bin.install "rizome"

        # Generate and install shell completions
        generate_completions_from_executable(bin/"rizome", "completion")
      end
    end
  end

  def caveats
    <<~EOS
      âœ¨ Rizome CLI installation complete!

      Quick Start:
        1. Run 'rizome init' to interactively create a RIZOME.md from templates
        2. Edit RIZOME.md with your project details and provider overrides
        3. Run 'rizome sync' to interactively synchronize provider configurations

      Template Management:
        rizome tmpl        List available templates
        rizome tmpl add    Create a new template interactively
        rizome tmpl edit   Edit an existing template
        rizome tmpl show   Show template content
        rizome tmpl delete Delete a template

      Example RIZOME.md format:
        # RIZOME.md

        Project overview and context.

        ## Common Instructions
        Instructions that apply to all AI providers:
        - Project type and technology stack
        - Coding standards and conventions

        ## Provider Overrides
        ### CLAUDE
        Claude-specific instructions

        ### QWEN
        Qwen-specific instructions

      Commands:
        rizome --help        Show help information
        rizome init          Interactive RIZOME.md creation from templates
        rizome tmpl          Manage RIZOME.md templates
        rizome sync          Interactive provider configuration sync
        rizome sync --dry-run    Preview changes without applying

      For more information: https://github.com/rizome-dev/rizome
    EOS
  end

  test do
    system "#{bin}/rizome", "--help"
    # Test sync command help (should work without RIZOME.md)
    system "#{bin}/rizome", "sync", "--help"
  end
end
